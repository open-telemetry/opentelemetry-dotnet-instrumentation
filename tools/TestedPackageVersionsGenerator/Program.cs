// <copyright file="Program.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

using System.Runtime.CompilerServices;
using System.Text;
using Microsoft.Build.Definition;
using Microsoft.Build.Evaluation;
using TestedPackageVersionsGenerator;

var thisFilePath = GetSourceFilePathName();
var solutionFolder = Path.Combine(thisFilePath, "..", "..", "..");

var packagePropsFile = Path.Combine(solutionFolder, "test", "Directory.Packages.props");

var project = Project.FromFile(packagePropsFile, new ProjectOptions());

var packageVersions = project.GetItems("PackageVersion").ToDictionary(x => x.EvaluatedInclude, x => x.DirectMetadata.Single().EvaluatedValue);

var xUnitFileStringBuilder = XUnitFileStringBuilder(packageVersions);
var buildFileStringBuilder = BuildFileStringBuilder(packageVersions);

object BuildFileStringBuilder(Dictionary<string, string> dictionary)
{
    var stringBuilder = new StringBuilder();
    stringBuilder.AppendLine(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the TestedPackageVersionsGenerator tool. To safely
//     modify this file, edit PackageVersionDefinitions.cs and
//     re-run the TestedPackageVersionsGenerator project in Visual Studio.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

public static class TestPackageVersions
{");
    stringBuilder.AppendLine(
        @"    public static IReadOnlyDictionary<string, IReadOnlyCollection<string>> Versions = new Dictionary<string, IReadOnlyCollection<string>>
    {");

    foreach (var packageVersionDefinition in PackageVersionDefinitions.Definitions)
    {
        stringBuilder.AppendLine($@"        {{
            ""{packageVersionDefinition.TestApplicationName}"",
            new List<string>
            {{");

        foreach (var version in packageVersionDefinition.Versions)
        {
            stringBuilder.AppendLine($"\"{version}\",");
        }

        stringBuilder.AppendLine(@"            }
        },");
    }

    stringBuilder.AppendLine("    };");
    stringBuilder.AppendLine("}");
    return stringBuilder;
}

var xUnitFilePath = Path.Combine(solutionFolder, "test", "IntegrationTests", "TestPackageVersions.g.cs");
var buildFilePath = Path.Combine(solutionFolder, "build", "TestPackageVersions.g.cs");

await File.WriteAllTextAsync(xUnitFilePath, xUnitFileStringBuilder.ToString());
await File.WriteAllTextAsync(buildFilePath, buildFileStringBuilder.ToString());

static string GetSourceFilePathName([CallerFilePath] string? callerFilePath = null)
    => callerFilePath ?? string.Empty;

StringBuilder XUnitFileStringBuilder(Dictionary<string, string> dictionary)
{
    var stringBuilder = new StringBuilder();

    stringBuilder.AppendLine(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the TestedPackageVersionsGenerator tool. To safely
//     modify this file, edit PackageVersionDefinitions.cs and
//     re-run the TestedPackageVersionsGenerator project in Visual Studio.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace IntegrationTests;

public class TestPackageVersions
{");

    foreach (var packageVersionDefinition in PackageVersionDefinitions.Definitions)
    {
        stringBuilder.AppendLine(
            $@"    public static readonly IReadOnlyCollection<object[]> {packageVersionDefinition.IntegrationName} = new List<object[]>
    {{
#if DEFAULT_TEST_PACKAGE_VERSIONS
        new object[] {{ string.Empty }}
#else");

        foreach (var version in packageVersionDefinition.Versions)
        {
            if (version == "*")
            {
                stringBuilder.AppendLine(
                    $"        new object[] {{ \"{dictionary[packageVersionDefinition.NugetPackageName]}\" }}");
            }
            else
            {
                stringBuilder.AppendLine($"        new object[] {{ \"{version}\" }}");
            }
        }

        stringBuilder.AppendLine("#endif");
        stringBuilder.AppendLine("    };");
    }

    stringBuilder.AppendLine("}");
    return stringBuilder;
}
