#nullable enable
//------------------------------------------------------------------------------
// <auto-generated />
// This comment is here to prevent StyleCop from analyzing a file originally from YamlDotNet.
//------------------------------------------------------------------------------

// This file is part of YamlDotNet - A .NET library for YAML.
// Copyright (c) Antoine Aubry and contributors
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Modified by OpenTelemetry Authors.

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Vendors.YamlDotNet.Helpers;

namespace Vendors.YamlDotNet.Serialization.Utilities
{
    internal readonly struct TypeConverterLookupResult
    {
        public bool HasMatch { get; }
        public IYamlTypeConverter? TypeConverter { get; }

        public TypeConverterLookupResult(bool hasMatch, IYamlTypeConverter? typeConverter)
        {
            HasMatch = hasMatch;
            TypeConverter = typeConverter;
        }
    }

    internal sealed class TypeConverterCache
    {
        private readonly IYamlTypeConverter[] typeConverters;
        private readonly ConcurrentDictionary<Type, TypeConverterLookupResult> cache = new();

        public TypeConverterCache(IEnumerable<IYamlTypeConverter>? typeConverters)
            : this(typeConverters?.ToArray() ?? Array.Empty<IYamlTypeConverter>())
        {
        }

        public TypeConverterCache(IYamlTypeConverter[] typeConverters)
        {
            this.typeConverters = typeConverters;
        }

        public bool TryGetConverterForType(Type type, out IYamlTypeConverter? typeConverter)
        {
            var result = cache.GetOrAdd(type, static (t, tc) => LookupTypeConverter(t, tc), typeConverters);

            typeConverter = result.TypeConverter;
            return result.HasMatch;
        }

        public IYamlTypeConverter GetConverterByType(Type converter)
        {
            foreach (var typeConverter in typeConverters)
            {
                if (typeConverter.GetType() == converter)
                {
                    return typeConverter;
                }
            }

            throw new ArgumentException($"{nameof(IYamlTypeConverter)} of type {converter.FullName} not found", nameof(converter));
        }

        private static TypeConverterLookupResult LookupTypeConverter(Type type, IYamlTypeConverter[] typeConverters)
        {
            foreach (var typeConverter in typeConverters)
            {
                if (typeConverter.Accepts(type))
                {
                    return new TypeConverterLookupResult(true, typeConverter);
                }
            }

            return new TypeConverterLookupResult(false, null);
        }
    }
}
