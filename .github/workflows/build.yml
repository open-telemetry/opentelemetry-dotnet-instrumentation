name: Build on Runners

on:
  workflow_call:

env:
  NUGET_PACKAGES: ${{ github.workspace }}/packages
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - machine: windows-2022
            log-dir: "/c/ProgramData/OpenTelemetry .NET AutoInstrumentation/logs"
          - machine: ubuntu-20.04
            log-dir: "/var/log/opentelemetry/dotnet"
          - machine: macos-12
            log-dir: "/var/log/opentelemetry/dotnet"
          - machine: otel-linux-arm64
            log-dir: "/var/log/opentelemetry/dotnet"
    runs-on: ${{ matrix.machine }}
    steps:

      - name: ARM64 Runner Info
        if: ${{ matrix.machine == 'otel-linux-arm64' }}
        run: cat /etc/os-release

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # tag: v4.2.2
        with:
          fetch-depth: 0 # fetching all, needed to correctly calculate version

      - name: Setup ARM64 Environment Variables
        if: ${{ matrix.machine == 'otel-linux-arm64' }}
        run: |
          echo "DOTNET_INSTALL_DIR=~/.dotnet" >> $GITHUB_ENV

      - name: Setup .NET
        uses: actions/setup-dotnet@6bd8b7f7774af54e05809fcc5431931b3eb1ddee # tag: v4.0.1
        with:
          dotnet-version: | 
            6.0.427
            7.0.410
            8.0.403

      - name: Check for NuGet packages cache
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # tag: v4.1.2
        id: nuget-cache
        with:
          key: ${{ hashFiles('**/Directory.packages.props', './build/LibraryVersions.g.cs', '**/packages.config' ) }}
          path: ${{ env.NUGET_PACKAGES }}

      - name: Restore NuGet packages
        if: ${{ steps.nuget-cache.outputs.cache-hit != 'true' }}
        continue-on-error: false
        run: ./build.cmd Restore

      - name: Cache NuGet packages
        if: ${{ steps.nuget-cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@6849a6489940f00c2f30c0fb92c6274307ccb58a # tag: v4.1.2
        with:
          key: ${{ hashFiles('**/Directory.packages.props', './build/LibraryVersions.g.cs', '**/packages.config' ) }}
          path: ${{ env.NUGET_PACKAGES }}

      - name: Setup ARM64 Machine
        if: ${{ matrix.machine == 'otel-linux-arm64' }}
        run: |
          sudo apt-get update && \
          sudo apt-get install -y \
              cmake \
              clang \
              make
      
      - name: Run BuildWorkflow
        run: ./build.cmd BuildWorkflow --no-restore ${{ steps.nuget-cache.outputs.cache-hit != 'true' }}

      - name: Download native CentOS Artifacts from build job
        if: ${{ matrix.machine == 'ubuntu-20.04' }}
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # tag: v4.1.8
        with:
          name: bin-centos-native
          path: bin/ci-artifacts/bin-centos-native

      - name: Replace Ubuntu native code by Centos artifacts
        if: ${{ matrix.machine == 'ubuntu-20.04' }}
        run: |
          rm ./bin/tracer-home/linux-x64/OpenTelemetry.AutoInstrumentation.Native.so
          cp ./bin/ci-artifacts/bin-centos-native/linux-x64/OpenTelemetry.AutoInstrumentation.Native.so ./bin/tracer-home/linux-x64/OpenTelemetry.AutoInstrumentation.Native.so

      - name: Install MacOS CoreUtils
        if: ${{ runner.os == 'macOS' }}
        run: brew install coreutils

      - name: Create test directory
        if: ${{ runner.os != 'Windows' }}
        run: sudo mkdir -p ${{ matrix.log-dir }} && sudo chmod a+rwx ${{ matrix.log-dir }}  # the instrumented process has no permissions to create log dir

      - name: Test the Shell scripts from README.md
        shell: bash
        run: |
          set -e
          dotnet publish -f net8.0 -c Release ./test/test-applications/integrations/TestApplication.Smoke
          export OTEL_DOTNET_AUTO_HOME="${PWD}/bin/tracer-home"
          . ./instrument.sh
          ./test/test-applications/integrations/bin/TestApplication.Smoke/Release/net8.0/publish/TestApplication.Smoke
            test "$(ls -A '${{ matrix.log-dir }}' )"

      - name: Test the Windows PowerShell module instructions from README.md
        if: ${{ runner.os == 'Windows' }}
        shell: powershell
        run: |
          $log_path = "C:\ProgramData\OpenTelemetry .NET AutoInstrumentation\logs\*"
          Import-Module "${PWD}/bin/installation-scripts/OpenTelemetry.DotNet.Auto.psm1"
          [System.Environment]::SetEnvironmentVariable("OTEL_DOTNET_AUTO_INSTALL_DIR", "${PWD}/bin/tracer-home", [System.EnvironmentVariableTarget]::Machine)
          Register-OpenTelemetryForCurrentSession -OTelServiceName "MyServiceDisplayName"
          ./test/test-applications/integrations/bin/TestApplication.Smoke/Release/net8.0/TestApplication.Smoke.exe
          if (-not $?) { throw "dotnet help returned exit code: $LASTEXITCODE" }
          if (-not (Test-Path $log_path)) { throw "Log file does not exist. Instrumentation test failed." }
          Remove-Item $log_path
          Unregister-OpenTelemetryForCurrentSession
          ./test/test-applications/integrations/bin/TestApplication.Smoke/Release/net8.0/TestApplication.Smoke.exe
          if (-not $?) { throw "dotnet help returned exit code: $LASTEXITCODE" }
          if (Test-Path $log_path) { throw "Log file exists. Instrumentation unregister failed." }

      - name: Upload binaries
        if: always()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # tag: v4.4.3
        with:
          name: bin-${{ matrix.machine }}
          path: bin/tracer-home

      - name: Upload installation scripts
        if: always()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # tag: v4.4.3
        with:
          name: installation-scripts-${{ matrix.machine }}
          path: bin/installation-scripts

      - name: Regenerate LibraryVersions.g.cs
        # Regenerate the library versions file to surface any version changes made to the packages being tested.
        run: ./build.cmd GenerateLibraryVersionFiles

      - name: Generated files unchanged
        shell: bash
        run: |
          git status
          git diff
          [[ -z "$(git status --porcelain)" ]]
